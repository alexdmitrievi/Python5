#Создайте программу для игры в ""Крестики-нолики"".



board = list(range(1,10)) # создали переменную board и положили в неё список элементами от 1 до 9 включительно

wins_coord = [[1,2,3], [1,4,7], [1,5,9], [2,5,8], [3,6,9], [3,5,7], [4,5,6], [7,8,9]] # создали переменную и положили в неё список с победными комбинациями в виде списков внутнри списка

def draw_board(): # создали функцию для удобства обращения к элементам списка и вывели её на консоль
    for i in range(3):
        print('|', board[0+i*3], '|', board[1+i*3],'|',board[2+i*3],'|')

# draw_board()

def take_input(p): # создали функцию с параметром p
    while True: # запустили бесконечный цикл
        value = int(input('куда поставить' + p + '?')) # создали переменную и положили в неё функцию для ввода целого числа, чтобы по указаным координатам занимать пустые ячейки в процессе игры
        if value > 9 or value < 1: # создали ветвление для того, чтобы пользователь использовал цифры в строго заданном диапазоне
            print('ошибочный ввод')
            continue # если ввод ошибочный, то начинаем итерацию снова
        if board[value-1] != value: # если элемент из списка ячейка занята, то ошибочный ввод
            print('эта ячейка уже занята')
            continue
        board[value-1] = p # в таблицу кладём наш символ
        break # останавливаем цикл

def check_win(): # создаем функцию, которая будет определять победителя
    for each in wins_coord: # запустили цикл по победным позициям
        new = list(map(lambda x: x - 1, each)) # создали переменную в которую положили функию с анонимной функцией, которая при каждой итерации будет вычитать минус один из элементов, которые лежать в списках с победными комбинациями
        if board[new[0]] == board[new[1]] == board[new[2]]: # если победная комбинация определена, то возвращаем победный символ, иначе игра продолжается
            return board[new[1]]
    return False    

count = 0 # создали счётчик и положили в неё 0
while True: # запустили бесконечный цикл
    draw_board() 
    if count % 2 == 0: # если остаток от деления на 2 строго равен нулю, то это икс
        take_input('X')
    else:              # иначе ходит О
        take_input('O')
    if count > 3: # создали ветвление при котором победитель может быть определен, только при колличестве ходов больше трёх
        winner = check_win() # положили в переменную winner функцию, которая определяет победителя
        if winner: # создали ветвление внутри ветвления в котором будет вызываться функция, определяющая победителя и если победитель выявлен, то будет выводиться тоблица и выводиться комбинация победителя
            draw_board()
            print('победил ' + winner)
            break
    count += 1  # увеличиваем счётчик на один
    if count > 8: # если ходов больше 8, то ничья
        print('ничья')
        break     








